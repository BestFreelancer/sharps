// CLEAR FLOATS
clearfix()
    &:before, &:after
        clear: both
        content: " "
        display: table

// GRID CONSTRUCTORS
grid_calc(colNumber, totalColumns)
    ((colNumber / totalColumns) * 100) + '%'

/*
* mixin for build row (block: 'line')
* use grid-row(true) to include a nested row
* use grid-row(false) to use a container row
*
* nest - special behavior for row, default: false
*/
grid_row(nest = false, pageWidth = 1000, remBase = 16)

    if nest
        width: auto
        margin-top: 0
        margin-bottom: 0
        max-width: none

    else
        width: 100%
        margin: 0 auto
        max-width: convert_to_rem(pageWidth, remBase)

/*
* creates a column, should be used inside of a media query to control layouts
*
* columns  - the number of columns this should be
* center   - center columns, default: false
* offset   - # of columns to offset, default: false
* push     - # of columns to push, default: false
* pull     - # of columns to pull, default: false
* position - column position, default: false
*/
grid_column(columns = false, center = false, offset = false, push = false, pull = false, position = false)

    if position or push or pull
        position: relative

    padding-left: 0
    padding-right: 0

    if columns
        width: grid_calc(columns, total_columns)

    if push
        left: grid_calc(push, total_columns)
        right: auto

    if pull
        right: grid_calc(pull, total_columns)
        left: auto

    float: left

    if center
        margin-left: auto
        margin-right: auto
        float: none !important

    if offset
        margin-left: grid_calc(offset, total_columns) !important

/*
* create presentational classes for grid
*
* size - name of class to use, i.e. "l" will generate l-1, -2, etc
*/
grid_html_classes(size)

    // center = true
    .line__col_d{size}c
        grid_column(center: true)

    // uncenter
    .line__col_d{size}uc
        margin-left: 0
        margin-right: 0
        float: left !important

    for i in (1..total_columns - 1)
        // push = i
        .line__col_d{size}ph_{i}
            grid_column(push: i)

        // pull = i
        .line__col_d{size}pl_{i}
            grid_column(pull: i)

    // position = true
    .line__col
        grid_column(position: true)

    // columns = i
    for i in (1..total_columns)
        .line__col_d{size}w_{i}
            grid_column(columns: i)

    [class*="line__col"] + [class*="line__col"]:last-child
        float: right
    [class*="line__col"] + [class*="line__col"].line__col_end
        float: left

    // offset = i
    for i in (1..total_columns - 1)
        .line__col_d{size}o_{i}
            grid_column(offset: i)

    .line__col_d{size}ro
        margin-left: 0
        margin-right: 0
        left: auto
        right: auto
        float: left
